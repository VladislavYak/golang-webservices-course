// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/user/user.go
//
// Generated by this command:
//
//	mockgen -source pkg/domain/user/user.go -destination mocks/user_repository_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	user "github.com/VladislavYak/redditclone/pkg/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddJWT mocks base method.
func (m *MockUserRepository) AddJWT(ctx context.Context, Token, UserID string, IssuedAt, ExpiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJWT", ctx, Token, UserID, IssuedAt, ExpiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJWT indicates an expected call of AddJWT.
func (mr *MockUserRepositoryMockRecorder) AddJWT(ctx, Token, UserID, IssuedAt, ExpiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJWT", reflect.TypeOf((*MockUserRepository)(nil).AddJWT), ctx, Token, UserID, IssuedAt, ExpiresAt)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, User *user.User, Password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, User, Password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, User, Password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, User, Password)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, User *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, User)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, User any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, User)
}

// GetUserPassword mocks base method.
func (m *MockUserRepository) GetUserPassword(ctx context.Context, arg1 *user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", ctx, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockUserRepositoryMockRecorder) GetUserPassword(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockUserRepository)(nil).GetUserPassword), ctx, arg1)
}

// ValidateJWT mocks base method.
func (m *MockUserRepository) ValidateJWT(ctx context.Context, Token string, ExpiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWT", ctx, Token, ExpiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateJWT indicates an expected call of ValidateJWT.
func (mr *MockUserRepositoryMockRecorder) ValidateJWT(ctx, Token, ExpiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockUserRepository)(nil).ValidateJWT), ctx, Token, ExpiresAt)
}
